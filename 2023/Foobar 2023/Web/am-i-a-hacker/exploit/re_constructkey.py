from Crypto.PublicKey import RSA


e = 65537

p = 31215741529396018812515417004134640787100009229316578288055352664708168865021272656000536899262237216860631014075314842117554610007584785247528295532050275281897604417282764201663808807866131061076109621186637487629104138790759152498808113255780623797965160486898486555778008939394145890311055258828954190178308166849200055982547690198347288279757383042462314793013547724250691979344270237100766694204909177118595054123447170601665312594417746437903137541815770388130579095016109991522854975636849723595280170415639640162352734245874461220998563696559283552786805218843463196427525233172636749571243928543303580034013
q = 30402875697527916397542806353742730596622654442106746350302238894535593339396455455591735451368472859476854630199750179547832911945983758029765757595944788994736200573660086736656535295280090525416332242026647058207466614733384683340253505694485121034528875758567312719588900446459838347913647592922250427872627540821441178997866779901629507417372874038905138874416375338163783306116392413078042237174844547262385443713228361726655568925316249089735893321976177123750174713558046420139158973584145499695359980069043188006927965179450759298726183987751273054613710406588107926281039974244219480943101454735002864334529

N = p*q

key = RSA.construct((N,e, pow(e,-1,(p-1)*(q-1)),p,q))

print(key.export_key().decode())